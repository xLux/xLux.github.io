<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[xLux 的博客]]></title>
  <link href="http://xlux.github.io/atom.xml" rel="self"/>
  <link href="http://xlux.github.io/"/>
  <updated>2015-09-24T22:38:24+08:00</updated>
  <id>http://xlux.github.io/</id>
  <author>
    <name><![CDATA[xLux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS8新控件UIAlertController]]></title>
    <link href="http://xlux.github.io/blog/2015/09/21/uialertcontroller/"/>
    <updated>2015-09-21T22:04:56+08:00</updated>
    <id>http://xlux.github.io/blog/2015/09/21/uialertcontroller</id>
    <content type="html"><![CDATA[<p>UIAlertController是iOS8中新出现的控件，之前项目中一直使用的是UIAlertView，但是iOS9之后，UIAlertView彻底废除了，总结一下两个控件的用法。</p>

<!--more-->


<h2>UIAlertView</h2>

<p>UIAlertView对话框是iOS5中出现的控件，不仅可以实现提示用户的作用，还可以添加UITextField输入控件，最多可以添加两个。UIAlertView的使用非常简单，最简单的用法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIAlertView *alertview = [[UIAlertView alloc] initWithTitle:@"标题" message:@"默认样式" delegate:self cancelButtonTitle:@"取消" otherButtonTitles:@"好的", nil];
</span><span class='line'>[alertview show];</span></code></pre></td></tr></table></div></figure>


<p>在UIAlertViewDelegate中监听哪个按钮被按下。
通过设置alertViewStyle属性来实现输入文字、密码，也可以实现作为登陆框的效果。</p>

<h2>UIAlertController</h2>

<p>UIAlertController的使用也比较简单，按钮的动作回调方法不再使用delegate，而是用block，代码结构看起来更加清晰。UIAlertController可以添加多个UItextField来作为输入框，使用更加灵活。使用方法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"请输入抢单积分" message:@"积分不能小于5分" preferredStyle:UIAlertControllerStyleAlert];
</span><span class='line'>            [alertController addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
</span><span class='line'>                textField.keyboardType = UIKeyboardTypeNumberPad;
</span><span class='line'>                textField.placeholder = @"所投积分";
</span><span class='line'>            }];
</span><span class='line'>            UIAlertAction *canselAction = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
</span><span class='line'>            kWeakSelf(self);
</span><span class='line'>            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
</span><span class='line'>                UITextField *textField = [[alertController textFields] firstObject];
</span><span class='line'>                if (textField.text.length == 0) {
</span><span class='line'>                    ALTip *tip = [[ALTip alloc] init];
</span><span class='line'>                    tip.tip = @"请输入积分";
</span><span class='line'>                    tip.parent = weakSelf;
</span><span class='line'>                    [tip show];
</span><span class='line'>                }else if([textField.text integerValue] &lt;= 5){
</span><span class='line'>                    ALTip *tip = [[ALTip alloc] init];
</span><span class='line'>                    tip.tip = @"输入的积分不符合规则";
</span><span class='line'>                    tip.parent = weakSelf;
</span><span class='line'>                    [tip show];
</span><span class='line'>                }else{
</span><span class='line'>                    [weakSelf getTheGrab:textField.text];
</span><span class='line'>                }
</span><span class='line'>            }];
</span><span class='line'>            [alertController addAction:canselAction];
</span><span class='line'>            [alertController addAction:okAction];
</span><span class='line'>            [self presentViewController:alertController animated:YES completion:nil];</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[像黑客一样写博客]]></title>
    <link href="http://xlux.github.io/blog/2015/09/17/blogginglikehackers/"/>
    <updated>2015-09-17T22:59:18+08:00</updated>
    <id>http://xlux.github.io/blog/2015/09/17/blogginglikehackers</id>
    <content type="html"><![CDATA[<p><strong>感谢</strong></p>

<p>首先感谢JACK的机器人的总结，本来准备部署好之后写篇博客记录一下整个过程、步骤，但是当看到了<code>JACK的机器人</code>写的<a href="http://www.loverobots.cn/website-construction/octopress">像黑客一样写博客</a>之后，就放弃了这个想法，感觉再写也无法出其右。在此Mark一下，虽然博主是在Windows上部署，但是整个的流程是一样的。</p>

<!--more-->


<p><strong>对Octopress的理解</strong></p>

<p>Octopress是一种静态博客框架，以Ruby语言为开发语言，依赖于各种Gem包，自动生成HTML文件和文件夹路径。框架的好处就在于敏捷开发，快速投入使用！使用Octopress作为框架，环境的搭建是一大块，之后只需几个命令便可在本地进行预览！可以与github关联起来，由于github提供Pages功能，将本地Octopress与自己的github Pages工程进行绑定即可，然后便可通过rake deploy命令部署到github。写博客使用markdown语法进行编辑，感觉还真有点码代码的感觉！-_-~~~</p>

<p><strong>为什么要通过这种方式写博客？</strong></p>

<p>写博客的好处不言而喻，通过第三方的博客系统，只需要把内容填上去即可，无需为各种界面性的东西操心。这对于非程序员来说肯定是简便的一种写博客的方式，但是对于工程师极客来说，不折腾一下怎么可以！！！折腾的过程就是学习和享受的过程！半年前就使用Octopress折腾过一次，当时搭建好之后就一直丢在那，没有去用。最近看了一些Ruby on Rails方面的东西，又想起这个博客框架，从头开始折腾！</p>

<p><strong>千里之行 始于足下</strong></p>

<p>之前也在其他博客上写过一些文字，今后就以此为根据地，记录学习成长的历程！合抱之木，生于毫末；九层之台，起于垒土；千里之行，始于足下。</p>
]]></content>
  </entry>
  
</feed>
